from mubble import CallbackQuery, Dispatch, MessageReplyHandler, WaiterMachine
from mubble.rules import CallbackData, HasText
from src.config import OWNER_ID

dp = Dispatch()
wm = WaiterMachine(max_storage_size=1024)


@dp.callback_query(CallbackData("report_bug"))
async def report_bug(cq: CallbackQuery):
    message = (
        await cq.ctx_api.send_message(
            cq.chat_id,
            "üêû <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É</b>\n\n"
            "üìù –û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫ –º–æ–∂–Ω–∞ <b>–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ</b>, —â–æ —Å–∞–º–µ –≤–∏ –∑—Ä–æ–±–∏–ª–∏, —Ç–∞ —è–∫–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞.",
        )
    ).unwrap()

    result, _ = await wm.wait(
        dp.message,
        (cq.ctx_api, message.chat_id),
        HasText(),
        default=MessageReplyHandler(
            "ü§¨ –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø–æ–º–∏–ª–∫—É <b>—Ç–µ–∫—Å—Ç–æ–º</b>, –±—É–¥—å-–ª–∞—Å–∫–∞."
        ),
    )

    await cq.ctx_api.send_message(
        OWNER_ID, f"üêû <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É</b>\n\n{result.text.unwrap()}"
    )
    await cq.ctx_api.edit_message_text(
        "<b>üå∏ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤–Ω–µ—Å–æ–∫ –≤ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω—ñ—é!</b>\n\n<blockquote>üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</blockquote>",
        chat_id=cq.chat_id,
        message_id=message.message_id,
    )
